X_train = train_data[, colnames(train_data) != 'Sale_Price']
X_train = model.matrix(~., X_train)[,-1]
Y_train = train_data$Sale_Price
xgb_model = xgboost(data = X_train, label=Y_train, max_depth = 6,
eta = 0.03, nrounds = 500,
# colsample_bytree = 0.6,
# subsample = 0.75,
verbose = FALSE)
X_test = test_data[, colnames(test_data) != 'Sale_Pri ce']
X_test = model.matrix(~. - PID, X_test)[,-1]
predict(xgb_model, X_test)
# fitControl = trainControl(method = "repeatedcv", number = 5)
# xgbGrid =  expand.grid(max_depth = c(3, 6, 9),
#                         nrounds = (20:40)*50,
#                         eta = c(0.3, 0.1, 0.01),
#                         colsample_bytree = c(0.6, 0.8),
#                         subsample = c(0.5, 0.75, 1),
#                         min_child_weight = 1,
#                         gamma = 1)
#
# xgbFit = train(Sale_Price ~ ., data = train_data, method = "xgbTree",
#                trControl = fitControl, verbose = FALSE, tuneGrid = xgbGrid)
# print(xgbFit)
#
# predict(xgbFit, test_data)
}
top_n_order = function (x, n) {
x = abs(x)
index = rep(0, n)
for (i in 1:n){
index[i] = which.max(x)
x[index[i]] = -Inf
}
index
}
test_all = function (all_data, all_test_pid, reg_func) {
rmse = matrix(0, length(all_test_pid), length(reg_func))
colnames(rmse) = names(reg_func)
for (i in 1:length(all_test_pid)){
test_pid = all_test_pid[[i]]
train_data = all_data[!all_data$PID %in% test_pid,]
test_data = all_data[all_data$PID %in% test_pid,]
r = preprocess_data(train_data, test_data)
for (f in 1:length(reg_func)) {
yhat_test = reg_func[[f]](r$train_data, r$test_data)
rmse[i, f] = get_RMSE(yhat_test, r$true_test_value)
top_error_id = top_n_order(yhat_test - r$true_test_value, 5)
cat("Model:", names(reg_func)[f], "\n")
cat("Top Error ID:", test_data[top_error_id,]$PID, "\n")
cat("Top Error:", abs(yhat_test - r$true_test_value)[top_error_id], "\n")
cat(rmse[i, f], "\n")
}
}
rmse
}
train_predict = function(train_data, test_data, reg_func, output_filename){
r = preprocess_data(train_data, test_data)
yhat_test = exp(reg_func(r$train_data, r$test_data))
if(!is.null(r$true_test_value)){
cat("RMSE:", log_RMSE(yhat_test, exp(r$true_test_value)), "\n")
}
output = cbind(test_data$PID, yhat_test)
colnames(output) = c("PID", "Sale_Price")
write.csv(output, output_filename, row.names = FALSE)
}
set.seed(6682)
all_data = read.csv("Ames_data.csv")
Project1_test_id =  read.table("Project1_test_id.txt", quote="\"", comment.char="")
test_batch = sample(1:dim(Project1_test_id)[2], 1)
test_pid = Project1_test_id[,test_batch]
cat("Select:", test_batch, "\n")
train_data = all_data[!all_data$PID %in% test_pid,]
test_data = all_data[all_data$PID %in% test_pid,]
write.csv(train_data, "train.csv", row.names = FALSE)
write.csv(test_data[, !colnames(test_data) %in% c("Sale_Price")], "test.csv", row.names = FALSE)
regression_functions = list(
# RandomForest = rf_predict,
# GBM = gbm_predict,
Lasso = lasso_predict
# Xgboost = xgb_predict,
# My_Lasso = mylasso_predict
)
all_test_id = list()
#bad_pid = c(902207130, 910251050, 908154195, 908154205, 908154235)
bad_pid = c(902207130, 910251050)
for (i in 1:dim(Project1_test_id)[2]){
all_test_id[[i]] = Project1_test_id[,i][!Project1_test_id[,i] %in% bad_pid]
}
start_time = proc.time()
rmse = test_all(all_data, all_test_id, regression_functions)
print(rmse)
cat("\n Avg:", colMeans(rmse), "\n" )
sort(rmse, decreasing = TRUE)[1:3]
mean(sort(rmse, decreasing = TRUE)[1:3])
sessionInfo()
library(forecast)
install.packages("forecast")
install.packages("forecast")
install.packages("forecast")
install.packages("forecast")
system("locate libSM.6.dylib")
system("locate libSM.6.dylib")
system("locate libSM.6.dylib")
install.packages("forecast")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('Desktop/stat542/project4/vissent')
?htmlOutput
htmlOutput("summary", container = tags$li, class = "custom-li-output")
?renderText()
runApp('Desktop/stat542/project4/vissent')
?textAreaInput
runApp('Desktop/stat542/project4/vissent')
?textAreaInput
runApp('Desktop/stat542/project4/vissent')
runApp('Desktop/stat542/project4/vissent')
text
input$review_content
input$review_content
runApp('Desktop/stat542/project4/vissent')
runApp('Desktop/stat542/project4/vissent')
runApp('Desktop/stat542/project4/vissent')
?eventReactive()
runApp('Desktop/stat542/project4/vissent')
runApp('Desktop/stat542/project4/vissent')
View(a)
View(absolutePanel)
install.packages("wordcloud")
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
library(wordcloud)
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62), colors=c("green", "red","black")
)
11*13
83/244
2300*0.7*12+1150
2300*0.07*12+1150
2300*0.92
2300*0.02*12
2300*0.4-650
50*log2(10/6)
205227/205211
205227/205211-1
101758/205227
161563/205227
161563/161576
161563/161576-1
?apriori
??apriori
2300*0.07
2300*0.07*1
2300*0.07*12
2300*0.07*12 +1000
2300*0.07*12
2300*0.07*12 - 45-
0
2300*0.07*12 - 450
0.2^10
0.8^10
70 / (80/170)
80/170
70 * (80/170)
90 * (80/170)
(45+5+20+930)/(45+930)
(45+930)/(45+5+20+930)
20/950
930/950
935/930
930/935
45/65
930/935
3 + 6 * 2 + 4 * 8
(1000 - 50) * (500/1000)
25*0.7
0.492000*2
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = data.frame(sapply(train_data, stringr::str_sub, start = -1,
end = -1))
test_data <- read_delim("testing.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
test_data = data.frame(sapply(test_data, stringr::str_sub, start = -1,
end = -1))
library(rpart)
model = rpart(X1 ~ ., data = train_data)
summary(model)
rpart.plot
?rpart
library(rpart)
model = rpart(X1 ~ ., data = train_data)
predict(model, test_data, type="class")
predict(model, type="class")
predict(model, type="class") == train_data$X1
sum(predict(model, type="class") == train_data$X1)
sum(predict(model, type="class") == train_data$X1) / len(train_data)
sum(predict(model, type="class") == train_data$X1) / dim(train_data)[1]
sum(predict(model, type="class") == train_data$X1) / dim(train_data)[1]
test_data
?read_delim
['Y', 'X1']
list('Y', 'X1')
list('Y', 'X1')
list('Y', 'X1')[1]
colnames(train_data)
colnames(train_data)[2:]
colnames(train_data)[2:3]
colnames(train_data)[2:-1]
colnames(train_data)[2:1000]
colnames(train_data)[2:dim(train_data)[2]]
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE, col_names=[])
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = data.frame(sapply(train_data, stringr::str_sub, start = -1,
end = -1))
test_data <- read_delim("testing.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE,
col_names = colnames(train_data)[2:dim(train_data)[2]])
library(rpart)
model = rpart(X1 ~ ., data = train_data)
test_label = predict(model, test_data, type="class")
test_data
colnames(test_data)
test_data <- read_delim("testing.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE,
col_names = colnames(train_data)[2:dim(train_data)[2]])
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = data.frame(sapply(train_data, stringr::str_sub, start = -1,
end = -1))
test_data <- read_delim("testing.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
test_data = data.frame(sapply(test_data, stringr::str_sub, start = -1,
end = -1))
colnames(test_data) = colnames(train_data)[2:dim(train_data)[2]]
test_data
library(rpart)
model = rpart(X1 ~ ., data = train_data)
test_label = predict(model, test_data, type="class")
test_label
setwd('/Users/SimonJi/Desktop/cs412/code/PA6')
write_csv(test_label, 'r.txt')
?write
write('r.txt', test_label)
test_label
array(test_label)
write_csv(array(test_label), file='r.txt')
write(array(test_label), file='r.txt')
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = data.frame(sapply(train_data, stringr::str_sub, start = -1,
end = -1))
test_data <- read_delim("testing.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
test_data = data.frame(sapply(test_data, stringr::str_sub, start = -1,
end = -1))
colnames(test_data) = colnames(train_data)[2:dim(train_data)[2]]
library(rpart)
model = rpart(X1 ~ ., data = train_data)
test_label = predict(model, test_data, type="class")
write_csv(array(test_label), 'r.txt')
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = data.frame(sapply(train_data, stringr::str_sub, start = -1,
end = -1))
test_data <- read_delim("testing.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
test_data = data.frame(sapply(test_data, stringr::str_sub, start = -1,
end = -1))
colnames(test_data) = colnames(train_data)[2:dim(train_data)[2]]
library(rpart)
model = rpart(X1 ~ ., data = train_data)
test_label = predict(model, test_data, type="class")
write(array(test_label), file = 'r.txt')
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = data.frame(sapply(train_data, stringr::str_sub, start = -1,
end = -1))
test_data <- read_delim("testing.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
test_data = data.frame(sapply(test_data, stringr::str_sub, start = -1,
end = -1))
colnames(test_data) = colnames(train_data)[2:dim(train_data)[2]]
library(rpart)
model = rpart(X1 ~ ., data = train_data)
test_label = predict(model, test_data, type="class")
write(array(test_label), file = 'r.txt')
?rpart
library(xgboost)
library(xgboost)
xgb.model = xgboost(data = train_data[,2:dim(train_data[2])], label=train_data[,1],
objective = "binary:logistic", eval_metric = "logloss",
verbose = TRUE)
train_data[,2:dim(train_data[2])]
train_data[,2:dim(train_data)[2]]
library(xgboost)
xgb.model = xgboost(data = train_data[,2:dim(train_data)[2]], label=train_data[,1],
objective = "binary:logistic", eval_metric = "logloss",
verbose = TRUE)
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$X1
xgb.model = xgboost(data = train_data[,2:dim(train_data)[2]], label=train_data[,1],
objective = "binary:logistic", eval_metric = "logloss",
verbose = TRUE)
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$X1
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "binary:logistic", eval_metric = "logloss",
verbose = TRUE)
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$X1
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "binary:logistic", eval_metric = "logloss",
nround = 500,
verbose = TRUE)
?X_train
dim(X_train)
X_train
Y_train
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$X1
xgb.model = xgboost(data = X_train, label=Y_train,
eval_metric = "logloss",
nround = 500,
verbose = TRUE)
test_label = predict(model, test_data, type="class")
test_label = predict(xgb.model, test_data, type="class")
X_test = model.matrix(~., test_data)[, -1]
test_label = predict(xgb.model, X_test, type="class")
test_label
X_test = model.matrix(~., test_data)[, -1]
test_label = predict(xgb.model, X_test, prediction_type="class")
test_label
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$X1
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "binary:logistic",
eval_metric = "logloss",
nround = 500,
verbose = TRUE)
Y_train
?xgboost
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$X1
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "multi:softmax",
eval_metric = "logloss",
nround = 500,
verbose = TRUE)
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$X1
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "num_class",
eval_metric = "logloss",
nround = 500,
verbose = TRUE)
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$X1
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "binary:logistic",
eval_metric = "logloss",
nround = 500,
verbose = TRUE)
library(catboost)
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$X1
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "multi:softprob",
eval_metric = "mlogloss",
nround = 500,
verbose = TRUE)
unique(Y_train)
len(unique(Y_train))
length(unique(Y_train))
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$X1
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "multi:softprob",
eval_metric = "mlogloss",
num_class = length(unique(Y_train)),
nround = 500,
verbose = TRUE)
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = as.integer(train_data$X1)
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "multi:softprob",
eval_metric = "mlogloss",
num_class = length(unique(Y_train)),
nround = 500,
verbose = TRUE)
train_data$X1 - 1
train_data$X1
train_data$X1 - 1
as.integer(train_data$X1) - 1
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = as.integer(train_data$X1) - 1
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "multi:softprob",
eval_metric = "mlogloss",
num_class = length(unique(Y_train)),
nround = 500,
verbose = TRUE)
X_test = model.matrix(~., test_data)[, -1]
test_label = predict(xgb.model, X_test, prediction_type="class")
test_label
predict(xgb.model, newdata = X_test)
predict(xgb.model, X_test, prediction_type="class")
dim(X_test)
predict(xgb.model, X_test, prediction_type="class")
test_prediction <- matrix(test_label, nrow = 4,
ncol=length(test_label)/4)
View(test_prediction)
test_prediction
test_prediction[1]
test_prediction[1,]
test_prediction[,1]
which.max(test_prediction)
which.max(test_prediction[,1])
which.max(test_prediction[,2])
test_label
dim(test_label)
length(test_label)
X_test = model.matrix(~., test_data)[, -1]
test_label = predict(xgb.model, X_test)
length(test_label)
library(xgboost)
X_train = train_data[,2:dim(train_data)[2]]
X_train = model.matrix(~., X_train)[, -1]
Y_train = as.integer(train_data$X1) - 1
numberOfClasses = length(unique(Y_train))
xgb.model = xgboost(data = X_train, label=Y_train,
objective = "multi:softprob",
eval_metric = "mlogloss",
num_class = numberOfClasses,
nfold = 5,
nround = 500,
verbose = TRUE)
X_test = model.matrix(~., test_data)[, -1]
test_pred = predict(xgb.model, X_test)
test_prediction <- matrix(test_pred, nrow = numberOfClasses,
ncol = length(test_pred)/numberOfClasses)
dim(test_prediction)
test_prediction
test_prediction[,1]
sapply(test_prediction, which.max)
?sapply
Lapply(test_prediction, which.max)
lapply(test_prediction, which.max)
vapply(test_prediction, which.max)
?apply
apply(test_prediction, 2, which.max)
X_test = model.matrix(~., test_data)[, -1]
test_pred = predict(xgb.model, X_test)
test_prediction <- matrix(test_pred, nrow = numberOfClasses,
ncol = length(test_pred)/numberOfClasses)
test_label = apply(test_prediction, 2, which.max)
test_label
X_test = model.matrix(~., test_data)[, -1]
test_pred = predict(xgb.model, X_test)
test_prediction <- matrix(test_pred, nrow = numberOfClasses,
ncol = length(test_pred)/numberOfClasses)
test_label = apply(test_prediction, 2, which.max)
write(array(test_label), file = 'r_xgb.txt')
test_label
dim(test_label)
X_test = model.matrix(~., test_data)[, -1]
test_pred = predict(xgb.model, X_test)
test_prediction <- matrix(test_pred, nrow = numberOfClasses,
ncol = length(test_pred)/numberOfClasses)
test_label = apply(test_prediction, 2, which.max)
write(test_label, file = 'r_xgb.txt')
length(test_label)
getwd()
?write
X_test = model.matrix(~., test_data)[, -1]
test_pred = predict(xgb.model, X_test)
test_prediction <- matrix(test_pred, nrow = numberOfClasses,
ncol = length(test_pred)/numberOfClasses)
test_label = apply(test_prediction, 2, which.max)
write(test_label, file = 'r_xgb.txt', ncolumns = 1)
