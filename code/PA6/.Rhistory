all_lambda = exp(seq(-10, 10, 0.2))
#all_lambda = c(1, 10, 100)
X_train = train_data[, !colnames(train_data) %in% c('PID','Sale_Price')]
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$Sale_Price
cv_rmse = rep(0, length(all_lambda))
cv_beta = matrix(0, length(all_lambda), dim(X_train)[2] + 1)
all_ids = sample(1:nrow(X_train), nrow(X_train))
all_test_ids = list()
size = ceiling(nrow(X_train) / cv_fold)
start = 1
for (i in 1:cv_fold){
end = start + size - 1
if(end > nrow(X_train)) end = nrow(X_train)
all_test_ids[[i]] = all_ids[start:end]
start = end + 1
}
for (lambda_i in 1:length(all_lambda)) {
for (i in 1:cv_fold){
X_train_split = X_train[-all_test_ids[[i]],]
Y_train_split = Y_train[-all_test_ids[[i]]]
X_test_split = X_train[all_test_ids[[i]],]
Y_test_split = Y_train[all_test_ids[[i]]]
# cv_beta[lambda_i,] = mylasso_myfit(X_train, Y_train, all_lambda[lambda_i], cv_beta[lambda_i,])
# yhat_test = mylasso_mypredict(X_test_split, cv_beta[lambda_i,])
beta = mylasso_myfit(X_train_split, Y_train_split, all_lambda[lambda_i])
yhat_test = mylasso_mypredict(X_test_split, beta)
cv_rmse[lambda_i] = cv_rmse[lambda_i] + get_RMSE(yhat_test, Y_test_split)
#cat("lambda", all_lambda[lambda_i], "\trmse", cv_rmse[lambda_i], "\n")
}
cv_rmse[lambda_i] = cv_rmse[lambda_i] / cv_fold
cat("lambda:", all_lambda[lambda_i], "\trmse:", cv_rmse[lambda_i], "\n")
}
min.lambda = all_lambda[which.min(cv_rmse)]
print(min.lambda)
mylasso_myfit(X_train, Y_train, min.lambda)
}
mylasso_predict = function(train_data, test_data) {
X_train = train_data[, colnames(train_data) != 'Sale_Price']
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$Sale_Price
beta = mylasso_myfit(X_train, Y_train, 10)
X_test = test_data[, colnames(test_data) != 'Sale_Price']
X_test = model.matrix(~. -PID, X_test)[, -1]
if(sum(names(X_train) != names(X_test)) > 0) stop("Unmatched train and test data")
mylasso_mypredict(X_test, beta)
}
rf_predict = function(train_data, test_data) {
x_train = train_data[, !colnames(train_data) %in% c("Sale_Price")]
rfModel = randomForest(x_train, train_data$Sale_Price, ntree=500);
predict(rfModel, test_data)
# fitControl = trainControl(method = "repeatedcv", number = 3)
# rfGrid =  expand.grid(mtry = c(sqrt(dim(train_data)[2]),
#                                   dim(train_data)[2] / 2,
#                                    dim(train_data)[2] / 3),
#                       ntree=c(200, 400, 600))
# rfFit = train(Sale_Price ~ ., data = train_data, method = "extraTrees",
#                trControl = fitControl)#, tuneGrid = rfGrid)
# print(rfFit)
# predict(rfFit, test_data)
}
gbm_predict = function(train_data, test_data) {
# gbmModel = gbm(Sale_Price ~ ., data = train_data, distribution = "gaussian", n.trees = 5000,
#              shrinkage = 0.001, interaction.depth = 4, bag.fraction = 0.5, cv.folds = 5,
#              verbose = FALSE)
#
# opt.size = gbm.perf(gbmModel, method="cv")
# predict(gbmModel, test_data, n.trees = opt.size)
fitControl = trainControl(method = "repeatedcv", number = 5)
gbmGrid =  expand.grid(interaction.depth = c(3, 6, 9),
n.trees = (20:40)*50,
shrinkage = c(0.1, 0.01),
n.minobsinnode = 20)
gbmFit = train(Sale_Price ~ ., data = train_data, method = "gbm",
trControl = fitControl, verbose = FALSE,
distribution = "gaussian")#, tuneGrid = gbmGrid)
print(gbmFit)
predict(gbmFit, test_data)
}
lasso_predict = function(train_data, test_data) {
X_train = train_data[, colnames(train_data) != 'Sale_Price']
X_train = model.matrix(~., X_train)[, -1]
Y_train = train_data$Sale_Price
cv.out = cv.glmnet(X_train, Y_train, alpha = 1)
X_test = test_data[, colnames(test_data) != 'Sale_Price']
X_test = model.matrix(~. -PID, X_test)[, -1]
#print(cv.out$lambda.min)
predict(cv.out, s = cv.out$lambda.min, newx = X_test)
}
xgb_predict = function(train_data, test_data) {
X_train = train_data[, colnames(train_data) != 'Sale_Price']
X_train = model.matrix(~., X_train)[,-1]
Y_train = train_data$Sale_Price
xgb_model = xgboost(data = X_train, label=Y_train, max_depth = 6,
eta = 0.03, nrounds = 500,
# colsample_bytree = 0.6,
# subsample = 0.75,
verbose = FALSE)
X_test = test_data[, colnames(test_data) != 'Sale_Pri ce']
X_test = model.matrix(~. - PID, X_test)[,-1]
predict(xgb_model, X_test)
# fitControl = trainControl(method = "repeatedcv", number = 5)
# xgbGrid =  expand.grid(max_depth = c(3, 6, 9),
#                         nrounds = (20:40)*50,
#                         eta = c(0.3, 0.1, 0.01),
#                         colsample_bytree = c(0.6, 0.8),
#                         subsample = c(0.5, 0.75, 1),
#                         min_child_weight = 1,
#                         gamma = 1)
#
# xgbFit = train(Sale_Price ~ ., data = train_data, method = "xgbTree",
#                trControl = fitControl, verbose = FALSE, tuneGrid = xgbGrid)
# print(xgbFit)
#
# predict(xgbFit, test_data)
}
top_n_order = function (x, n) {
x = abs(x)
index = rep(0, n)
for (i in 1:n){
index[i] = which.max(x)
x[index[i]] = -Inf
}
index
}
test_all = function (all_data, all_test_pid, reg_func) {
rmse = matrix(0, length(all_test_pid), length(reg_func))
colnames(rmse) = names(reg_func)
for (i in 1:length(all_test_pid)){
test_pid = all_test_pid[[i]]
train_data = all_data[!all_data$PID %in% test_pid,]
test_data = all_data[all_data$PID %in% test_pid,]
r = preprocess_data(train_data, test_data)
for (f in 1:length(reg_func)) {
yhat_test = reg_func[[f]](r$train_data, r$test_data)
rmse[i, f] = get_RMSE(yhat_test, r$true_test_value)
top_error_id = top_n_order(yhat_test - r$true_test_value, 5)
cat("Model:", names(reg_func)[f], "\n")
cat("Top Error ID:", test_data[top_error_id,]$PID, "\n")
cat("Top Error:", abs(yhat_test - r$true_test_value)[top_error_id], "\n")
cat(rmse[i, f], "\n")
}
}
rmse
}
train_predict = function(train_data, test_data, reg_func, output_filename){
r = preprocess_data(train_data, test_data)
yhat_test = exp(reg_func(r$train_data, r$test_data))
if(!is.null(r$true_test_value)){
cat("RMSE:", log_RMSE(yhat_test, exp(r$true_test_value)), "\n")
}
output = cbind(test_data$PID, yhat_test)
colnames(output) = c("PID", "Sale_Price")
write.csv(output, output_filename, row.names = FALSE)
}
set.seed(6682)
all_data = read.csv("Ames_data.csv")
Project1_test_id =  read.table("Project1_test_id.txt", quote="\"", comment.char="")
test_batch = sample(1:dim(Project1_test_id)[2], 1)
test_pid = Project1_test_id[,test_batch]
cat("Select:", test_batch, "\n")
train_data = all_data[!all_data$PID %in% test_pid,]
test_data = all_data[all_data$PID %in% test_pid,]
write.csv(train_data, "train.csv", row.names = FALSE)
write.csv(test_data[, !colnames(test_data) %in% c("Sale_Price")], "test.csv", row.names = FALSE)
regression_functions = list(
# RandomForest = rf_predict,
# GBM = gbm_predict,
Lasso = lasso_predict
# Xgboost = xgb_predict,
# My_Lasso = mylasso_predict
)
all_test_id = list()
#bad_pid = c(902207130, 910251050, 908154195, 908154205, 908154235)
bad_pid = c(902207130, 910251050)
for (i in 1:dim(Project1_test_id)[2]){
all_test_id[[i]] = Project1_test_id[,i][!Project1_test_id[,i] %in% bad_pid]
}
start_time = proc.time()
rmse = test_all(all_data, all_test_id, regression_functions)
print(rmse)
cat("\n Avg:", colMeans(rmse), "\n" )
sort(rmse, decreasing = TRUE)[1:3]
mean(sort(rmse, decreasing = TRUE)[1:3])
sessionInfo()
library(forecast)
install.packages("forecast")
install.packages("forecast")
install.packages("forecast")
install.packages("forecast")
system("locate libSM.6.dylib")
system("locate libSM.6.dylib")
system("locate libSM.6.dylib")
install.packages("forecast")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('Desktop/stat542/project4/vissent')
?htmlOutput
htmlOutput("summary", container = tags$li, class = "custom-li-output")
?renderText()
runApp('Desktop/stat542/project4/vissent')
?textAreaInput
runApp('Desktop/stat542/project4/vissent')
?textAreaInput
runApp('Desktop/stat542/project4/vissent')
runApp('Desktop/stat542/project4/vissent')
text
input$review_content
input$review_content
runApp('Desktop/stat542/project4/vissent')
runApp('Desktop/stat542/project4/vissent')
runApp('Desktop/stat542/project4/vissent')
?eventReactive()
runApp('Desktop/stat542/project4/vissent')
runApp('Desktop/stat542/project4/vissent')
View(a)
View(absolutePanel)
install.packages("wordcloud")
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
library(wordcloud)
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62), colors=c("green", "red","black")
)
11*13
83/244
2300*0.7*12+1150
2300*0.07*12+1150
2300*0.92
2300*0.02*12
2300*0.4-650
50*log2(10/6)
205227/205211
205227/205211-1
101758/205227
161563/205227
161563/161576
161563/161576-1
?apriori
??apriori
2300*0.07
2300*0.07*1
2300*0.07*12
2300*0.07*12 +1000
2300*0.07*12
2300*0.07*12 - 45-
0
2300*0.07*12 - 450
0.2^10
0.8^10
70 / (80/170)
80/170
70 * (80/170)
90 * (80/170)
(45+5+20+930)/(45+930)
(45+930)/(45+5+20+930)
20/950
930/950
935/930
930/935
45/65
930/935
3 + 6 * 2 + 4 * 8
(1000 - 50) * (500/1000)
25*0.7
0.492000*2
library(rpart)
?rpart
library(readr)
training <- read_delim("~/Desktop/cs412/code/PA6/training.txt",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(training)
training[1]
training[1,1]
training[,1]
training[,1:2]
training[1,]
training[,1][2:3]
training[,1]
training[,2]
training[,2][1:2]
training[,2][2]
training[,2][1]
"ab"[1]
"ab"[[1]]
"ab"[1:1]
substring("abcd", 1, 2)
substring(training[,2], 1, 2)
substring(training[,2], 2, 3)
training[,2]
rpart(X1 ~ ., data = training)
substr(training[,2], 2, 3)
substr("training[,2]", 2, 3)
substring(training[,1], 2, 4)
substring(training[,1], 2, 4)
sapply(training, substring, 2, 4)
sapply(training, substring, 3, 4)
sapply(training, substring, -2, -1)
sapply(training, substring, -1, -2)
sapply(training, substring, 3, 4)
sapply(training[,2:], substring, 3, 4)
sapply(training[,2:-1], substring, 3, 4)
training[,2:3]
training[,2:-1]
dim(training)
dim(training)[2]
training[,2:dim(training)[2]]
?substring
strsplit("1:3")
strsplit("1:3", ':')
sapply(training[,2:-1], strsplit, ":")
sapply(training[,2:-1], strsplit)
sapply(training[1，], strsplit)
sapply(training[1,], strsplit)
setwd('~/Desktop/cs412/code/PA6/')
library(readr)
training <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
View(training)
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
View(training)
train_data[1,]
sapply(train_data[1,], strsplit)
sapply(train_data[1,], strsplit, ':')
train_data[1,]
train_data[1,][1]
train_data[1,][2]
traindata[1,1]
train_data[1,1]
train_data[1,2]
sapply(train_data[1,2], strsplit, ':')
sapply(train_data[2,], strsplit, ':')
sapply(train_data[1,])
sapply(train_data[1,], strsplit)
sapply(train_data[1,], strsplit, ':')
sapply(train_data[1,2], strsplit, ':')
sapply(train_data[1,2:], strsplit, ':')
train_data[1,2:-1]
train_data[,2:3]
train_data[,2:-1]
train_data[,2:dim(train_data)[2]]
dim(train_data[,2:dim(train_data)[2]])
sapply(train_data[,2:dim(train_data)[2]], strsplit)
sapply(train_data[,2:dim(train_data)[2]], strsplit, ":")
train_data[,2:dim(train_data)[2]]
train_data[,2:dim(train_data)[2]][1,]
sapply(train_data[,2:dim(train_data)[2]][1,],strsplit,":")
dim(sapply(train_data[,2:dim(train_data)[2]][1,],strsplit,":"))
sapply(train_data[,2:dim(train_data)[2]][1,],strsplit,":")[``]
sapply(train_data[,2:dim(train_data)[2]][1,],strsplit,":")[1]
sapply(train_data[,2:dim(train_data)[2]][1,],substr,1,3)
dim(sapply(train_data[,2:dim(train_data)[2]][1,],substr,1,3))
dim(sapply(train_data[,2:dim(train_data)[2]],substr,1,3))
dim(sapply(train_data[,2:dim(train_data)[2]],substr,1,3))
str(train_data)
?substring
substring("abcdef", 1:6, 1:6)
substring("abcdef", 1:6)
train_data[,2:3]
strsplit(train_data[,2:3], ':')
sapply(train_data[,2:3], strsplit,':')
str_sub("aaaa", start = -3, end = -1)
stringr::str_sub("aaaa", start = -3, end = -1)
stringr::str_sub("abcdefg", start = -3, end = -1)
stringr::str_sub("abcdefg", start = -2, end = -1)
sapply(train_data, stringr::str_sub, start = -2, end = -1)
sapply(train_data, stringr::str_sub, start = -1, end = -1)
int(sapply(train_data, stringr::str_sub, start = -1, end = -1))
dim(sapply(train_data, stringr::str_sub, start = -1, end = -1))
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = sapply(train_data, stringr::str_sub, start = -1, end = -1)
as.factor(train_data)
dim(as.factor(train_data))
train_data
train_data[1,]
train_data[2,]
as.integer(train_data[,1])
?for
d
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = sapply(train_data, stringr::str_sub, start = -1, end = -1)
train_data[,1] = as.integer(train_data[,1])
for (i in (2:dim(train_data)[2])) {
train_data[, i] = as.factor(train_data[, i])
}
str(train_data)
train_data[1,]
dim(train_data)
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = sapply(train_data, stringr::str_sub, start = -1, end = -1)
train_data[,1] = as.integer(train_data[,1])
for (i in (2:dim(train_data)[2])) {
train_data[, i] = as.factor(train_data[, i])
}
str(train_data)
train_data[,1] = as.integer(train_data[,1])
train_data[,1]
as.integer(train_data[,1])
train_data[,1] <- as.integer(train_data[,1])
train_data[,1]
train_data[,1][1]
train_data[,1][1]= 400
train_data[,1][1]
train_data[,1] = 0
train_data[,1][1]
train_data[,1]
as.integer(train_data[,1])
train_data[,1] = as.integer(train_data[,1])
train_data[,1]
as.factor(train_data[,1])
as.factor(train_data[,2])
as.factor(train_data[,3])
?read_delim
str(train_data)
train_data[,1]
str(train_data[,1])
train_data[1,]
train_data[1,] = as.factor(train_data[1,])
train_data[1,]
train_data[,1]
str(train_data[,1])
library(readr)
testing <- read_delim("~/Desktop/cs412/code/PA6/testing.txt",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(testing)
str(testing)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
str(train_data)
train_data = sapply(train_data, stringr::str_sub, start = -1, end = -1)
str(train_data)
data.frame(train_data)
str(data.frame(train_data))
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = data.frame(sapply(train_data, stringr::str_sub, start = -1,
end = -1))
str(train_data)
train_data$X1
train_data$X2
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = data.frame(sapply(train_data, stringr::str_sub, start = -1,
end = -1))
test_data <- read_delim("testing.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
test_data = data.frame(sapply(test_data, stringr::str_sub, start = -1,
end = -1))
str(test_data)
?rpart
library(rpart)
model = rpart(X1 ~ ., data = train_data)
model
summary.rpart(model)
summary(model)
predict(model)
predict(model, data = test_data)
which.max(predict(model))
p=predict(model, data = test_data)
dim(p)
which.max(p)
which.max(p[1])
which.max(p[2])
which.max(p[3])
p[1]
p[1,]
which.max(p[1,])
which.max(p[2,])
which.max(p[3,])
plot(model)
model
summary(model)
rpart.plot(model)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(readr)
train_data <- read_delim("training.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
train_data = data.frame(sapply(train_data, stringr::str_sub, start = -1,
end = -1))
test_data <- read_delim("testing.txt", " ", escape_double = FALSE,
col_names = FALSE, trim_ws = TRUE)
test_data = data.frame(sapply(test_data, stringr::str_sub, start = -1,
end = -1))
library(rpart)
?install.packages()
remove.packages("rpart")
remove.packages("rpart")
install.packages("rpart")
library(rpart)
install.packages("rpart")
library(rpart)
model = rpart(X1 ~ ., data = train_data)
ver
version
